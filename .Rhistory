library(SimulateHte)
library(dplyr)
library(SmoothHte)
library(rms)
databaseSettings <- createDatabaseSettings(
numberOfObservations = 1e4,
numberOfCovariates = 4,
covariateDistributionSettings = list(
createNormalDistributionSettings(),
createNormalDistributionSettings(),
createNormalDistributionSettings(),
createNormalDistributionSettings()
)
)
baselineRiskSettings <- createBaselineRiskSettings(
type = "binary",
modelSettings = createModelSettings(
constant = -1.5,
modelMatrix = diag(4),
transformationSettings = list(
identity,
identity,
identity,
identity
),
coefficients = rep(.8, 4)
)
)
propensitySettings <- createPropensitySettings(
type = "binary",
modelSettings = createModelSettings(
constant = 0,
modelMatrix = diag(0)
)
)
treatmentEffectSettings <- createTreatmentEffectSettings(
type = "lp",
modelSettings = createModelSettings(
constant = -0.5108256
)
)
dd <- runDataGeneration(
databaseSettings,
propensitySettings,
baselineRiskSettings,
treatmentEffectSettings
)
dd %>% head()
pp = createPredictionSettings(
args = list(
formula = "outcome ~ x1 + x2 + x3 + x4 + treatment",
family = "binomial"
),
fun = "glm"
)
do.call(eval(parse(text = pp$fun)), pp$args)
pp$args$data <- dd
pp$args$data <- dd
do.call(eval(parse(text = pp$fun)), pp$args)
library(SimulateHte)
library(dplyr)
library(SmoothHte)
library(rms)
databaseSettings <- createDatabaseSettings(
numberOfObservations = 1e4,
numberOfCovariates = 4,
covariateDistributionSettings = list(
createNormalDistributionSettings(),
createNormalDistributionSettings(),
createNormalDistributionSettings(),
createNormalDistributionSettings()
)
)
baselineRiskSettings <- createBaselineRiskSettings(
type = "binary",
modelSettings = createModelSettings(
constant = -1.5,
modelMatrix = diag(4),
transformationSettings = list(
identity,
identity,
identity,
identity
),
coefficients = rep(.8, 4)
)
)
propensitySettings <- createPropensitySettings(
type = "binary",
modelSettings = createModelSettings(
constant = 0,
modelMatrix = diag(0)
)
)
treatmentEffectSettings <- createTreatmentEffectSettings(
type = "lp",
modelSettings = createModelSettings(
constant = -0.5108256
)
)
simulationSettings <- list(databaseSettings = databaseSettings, propensitySettings = propensitySettings, baselineRiskSettings = baselineRiskSettings, treatmentEffectSettings = treatmentEffectSettings)
pp
simulationSettings <- list(
databaseSettings = databaseSettings,
propensitySettings = propensitySettings,
baselineRiskSettings = baselineRiskSettings,
treatmentEffectSettings = treatmentEffectSettings
)
predictionSettings <- createPredictionSettings(
args = list(
formula = "outcome ~ x1 + x2 + x3 + x4 + treatment",
family = "binomial"
),
fun = "glm"
)
runSimulation <- function(
simulationSettings,
predictionSettings,
smoothSettings,
runSettings
) {
simulatedDataset <- SimulateHte::runDataGeneration(
databaseSettings        = simulationSettings$databaseSettings,
propensitySettings      = simulationSettings$propensitySettings,
baselineRiskSettings    = simulationSettings$baselineRiskSettings,
treatmentEffectSettings = simulationSettings$treatmentEffectSettings
)
predictionSettings$args$data <- simulatedDataset
predictionModel <- do.call(
eval(parse(text = predictionSettings$fun)),
predictionSettings$args
)
simulatedDataset <- simulatedDataset %>%
dplyr::mutate(
riskLinearPredictor = predict(
predictionModel,
newdata = simulatedDataset %>%
dplyr::mutate(treatment = 0)
)
)
return(simulatedDataset)
}
runSimulation(
simulationSettings,
predictionSettings,
NULL, NULL
)
runSimulation(
simulationSettings,
predictionSettings,
NULL, NULL
) %>% head()
devtools::document()
devtools::document()
library(SimulationEvaluationHte)
smoothSettings <- list(
loess = createSmoothSettings(
type = "loess",
settings = SmoothHte::createLoessSettings(),
label = "loess"
),
rcs = createSmoothSettings(
type = "rcs",
settings = SmoothHte::createRcsSettings(),
label = "rcs"
),
locfit = createSmoothSettings(
type = "locfit",
settings = SmoothHte::createLocfitSettings(),
label = "locfit"
)
)
runSimulation(
simulationSettings,
predictionSettings,
smoothSettings, NULL
)
library(SimulateHte)
library(dplyr)
library(SmoothHte)
library(rms)
databaseSettings <- createDatabaseSettings(
numberOfObservations = 1e4,
numberOfCovariates = 4,
covariateDistributionSettings = list(
createNormalDistributionSettings(),
createNormalDistributionSettings(),
createNormalDistributionSettings(),
createNormalDistributionSettings()
)
)
baselineRiskSettings <- createBaselineRiskSettings(
type = "binary",
modelSettings = createModelSettings(
constant = -1.5,
modelMatrix = diag(4),
transformationSettings = list(
identity,
identity,
identity,
identity
),
coefficients = rep(.8, 4)
)
)
propensitySettings <- createPropensitySettings(
type = "binary",
modelSettings = createModelSettings(
constant = 0,
modelMatrix = diag(0)
)
)
treatmentEffectSettings <- createTreatmentEffectSettings(
type = "lp",
modelSettings = createModelSettings(
constant = -0.5108256
)
)
simulationSettings <- list(
databaseSettings = databaseSettings,
propensitySettings = propensitySettings,
baselineRiskSettings = baselineRiskSettings,
treatmentEffectSettings = treatmentEffectSettings
)
predictionSettings <- createPredictionSettings(
args = list(
formula = "outcome ~ x1 + x2 + x3 + x4 + treatment",
family = "binomial"
),
fun = "glm"
)
smoothSettings <- list(
loess = createSmoothSettings(
type = "loess",
settings = SmoothHte::createLoessSettings(),
label = "loess"
),
rcs = createSmoothSettings(
type = "rcs",
settings = SmoothHte::createRcsSettings(),
label = "rcs"
),
locfit = createSmoothSettings(
type = "locfit",
settings = SmoothHte::createLocfitSettings(),
label = "locfit"
)
)
runSimulation(
simulationSettings,
predictionSettings,
smoothSettings, NULL
)
devtools::document()
library(SimulationEvaluationHte)
devtools::document()
devtools::document()
library(SimulationEvaluationHte)
fitLocfitHte()
bind_rows
devtools::docu
devtools::document()
devtools::document()
library(SimulationEvaluationHte)
library(SimulateHte)
library(dplyr)
library(SmoothHte)
library(rms)
databaseSettings <- createDatabaseSettings(
numberOfObservations = 1e4,
numberOfCovariates = 4,
covariateDistributionSettings = list(
createNormalDistributionSettings(),
createNormalDistributionSettings(),
createNormalDistributionSettings(),
createNormalDistributionSettings()
)
)
baselineRiskSettings <- createBaselineRiskSettings(
type = "binary",
modelSettings = createModelSettings(
constant = -1.5,
modelMatrix = diag(4),
transformationSettings = list(
identity,
identity,
identity,
identity
),
coefficients = rep(.8, 4)
)
)
propensitySettings <- createPropensitySettings(
type = "binary",
modelSettings = createModelSettings(
constant = 0,
modelMatrix = diag(0)
)
)
treatmentEffectSettings <- createTreatmentEffectSettings(
type = "lp",
modelSettings = createModelSettings(
constant = -0.5108256
)
)
simulationSettings <- list(
databaseSettings = databaseSettings,
propensitySettings = propensitySettings,
baselineRiskSettings = baselineRiskSettings,
treatmentEffectSettings = treatmentEffectSettings
)
predictionSettings <- createPredictionSettings(
args = list(
formula = "outcome ~ x1 + x2 + x3 + x4 + treatment",
family = "binomial"
),
fun = "glm"
)
smoothSettings <- list(
loess = createSmoothSettings(
type = "loess",
settings = SmoothHte::createLoessSettings(),
label = "loess"
),
rcs = createSmoothSettings(
type = "rcs",
settings = SmoothHte::createRcsSettings(),
label = "rcs"
),
locfit = createSmoothSettings(
type = "locfit",
settings = SmoothHte::createLocfitSettings(),
label = "locfit"
)
)
runSimulation(
simulationSettings,
predictionSettings,
smoothSettings, NULL
)
simulatedDataset <- SimulateHte::runDataGeneration(
databaseSettings        = simulationSettings$databaseSettings,
propensitySettings      = simulationSettings$propensitySettings,
baselineRiskSettings    = simulationSettings$baselineRiskSettings,
treatmentEffectSettings = simulationSettings$treatmentEffectSettings
)
predictionSettings$args$data <- simulatedDataset
predictionModel <- do.call(
eval(parse(text = predictionSettings$fun)),
predictionSettings$args
)
simulatedDataset <- simulatedDataset %>%
dplyr::mutate(
riskLinearPredictor = predict(
predictionModel,
newdata = simulatedDataset %>%
dplyr::mutate(treatment = 0)
)
)
simulatedDataset0 <- simulatedDataset %>%
dplyr::filter(treatment == 0)
simulatedDataset1 <- simulatedDataset %>%
dplyr::filter(treatment == 1)
smoothLabels <- unlist(
rlist::list.map(                     # extract the second element of a
smoothSettings,                    # list of lists (here the label)
.[2]
)
)
names(smoothLabels) <- NULL
pehe <- list()
i=-1
i=1
smoothSettingsTmp <- smoothSettings[[i]]
smoothSettingsTmp
if (smoothSettingsTmp == "loess") {
f <- "fitLoessHte"
} else if (smoothSettingsTmp == "rcs") {
f <- "fitRcsHte"
} else {
f <- "fitLocfitHte"
}
smoothSettingsTmp$label
library(SimulationEvaluationHte)
library(SimulateHte)
library(dplyr)
library(SmoothHte)
library(rms)
databaseSettings <- createDatabaseSettings(
numberOfObservations = 1e4,
numberOfCovariates = 4,
covariateDistributionSettings = list(
createNormalDistributionSettings(),
createNormalDistributionSettings(),
createNormalDistributionSettings(),
createNormalDistributionSettings()
)
)
baselineRiskSettings <- createBaselineRiskSettings(
type = "binary",
modelSettings = createModelSettings(
constant = -1.5,
modelMatrix = diag(4),
transformationSettings = list(
identity,
identity,
identity,
identity
),
coefficients = rep(.8, 4)
)
)
propensitySettings <- createPropensitySettings(
type = "binary",
modelSettings = createModelSettings(
constant = 0,
modelMatrix = diag(0)
)
)
treatmentEffectSettings <- createTreatmentEffectSettings(
type = "lp",
modelSettings = createModelSettings(
constant = -0.5108256
)
)
simulationSettings <- list(
databaseSettings = databaseSettings,
propensitySettings = propensitySettings,
baselineRiskSettings = baselineRiskSettings,
treatmentEffectSettings = treatmentEffectSettings
)
predictionSettings <- createPredictionSettings(
args = list(
formula = "outcome ~ x1 + x2 + x3 + x4 + treatment",
family = "binomial"
),
fun = "glm"
)
smoothSettings <- list(
loess = createSmoothSettings(
type = "loess",
settings = SmoothHte::createLoessSettings(),
label = "loess"
),
rcs = createSmoothSettings(
type = "rcs",
settings = SmoothHte::createRcsSettings(),
label = "rcs"
),
locfit = createSmoothSettings(
type = "locfit",
settings = SmoothHte::createLocfitSettings(),
label = "locfit"
)
)
runSimulation(
simulationSettings,
predictionSettings,
smoothSettings, NULL
)
simulatedDataset <- SimulateHte::runDataGeneration(
databaseSettings        = simulationSettings$databaseSettings,
propensitySettings      = simulationSettings$propensitySettings,
baselineRiskSettings    = simulationSettings$baselineRiskSettings,
treatmentEffectSettings = simulationSettings$treatmentEffectSettings
)
predictionSettings$args$data <- simulatedDataset
predictionModel <- do.call(
eval(parse(text = predictionSettings$fun)),
predictionSettings$args
)
simulatedDataset <- simulatedDataset %>%
dplyr::mutate(
riskLinearPredictor = predict(
predictionModel,
newdata = simulatedDataset %>%
dplyr::mutate(treatment = 0)
)
)
simulatedDataset0 <- simulatedDataset %>%
dplyr::filter(treatment == 0)
simulatedDataset1 <- simulatedDataset %>%
dplyr::filter(treatment == 1)
smoothLabels <- unlist(
rlist::list.map(                     # extract the second element of a
smoothSettings,                    # list of lists (here the label)
.[2]
)
)
names(smoothLabels) <- NULL
pehe <- list()
i=1
smoothSettingsTmp <- smoothSettings[[i]]
if (smoothSettingsTmp$type == "loess") {
f <- "fitLoessHte"
} else if (smoothSettingsTmp$type == "rcs") {
f <- "fitRcsHte"
} else {
f <- "fitLocfitHte"
}
f
args <- list(
data = simulatedDataset0,
settings = smoothSettingsTmp$settings
)
s0 <- do.call(
eval(parse(text = f)),
args = args
)
f
fitLoessHte(data = simulatedDataset0, settings = args$settings)
createLoessSettings()
